{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GAMING\\\\Downloads\\\\kino\\\\src\\\\auth\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/React.createContext({\n  user: null,\n  isAuthenticated: false,\n  login: () => {},\n  logout: () => {}\n});\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = _ref => {\n  _s2();\n  let {\n    children\n  } = _ref;\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const login = async credentials => {\n    try {\n      console.log(\"aaaaaaaaaaaaaaaaaaaaaaa\");\n      console.log(JSON.stringify(credentials));\n      const response = await fetch(\"http://localhost:8080/api/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(credentials)\n      });\n      if (!response.ok) {\n        console.log(response);\n        throw new Error(\"Login failed\");\n      }\n      const data = await response.json();\n      setUser(data.id);\n      setIsAuthenticated(true);\n    } catch (error) {\n      console.error(error);\n      // handle login error\n    }\n  };\n\n  const logout = () => {\n    // clear user session and set isAuthenticated to false\n    console.log(\"logout\");\n    setIsAuthenticated(false);\n    setUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"mbKa3mHmiYR6ypr2drLsAAm+MEk=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","useContext","useState","AuthContext","createContext","user","isAuthenticated","login","logout","useAuth","AuthProvider","children","setIsAuthenticated","setUser","credentials","console","log","JSON","stringify","response","fetch","method","headers","body","ok","Error","data","json","id","error"],"sources":["C:/Users/GAMING/Downloads/kino/src/auth/AuthContext.tsx"],"sourcesContent":["import React, { useContext, useState } from \"react\";\r\nimport { UserData } from \"../types/userData\";\r\n\r\ntype Credentials = {\r\n  username: string;\r\n  password: string;\r\n};\r\n\r\ntype AuthContextValue = {\r\n  user: number | null;\r\n  isAuthenticated: boolean;\r\n  login: (credentials: Credentials) => void;\r\n  logout: () => void;\r\n};\r\n\r\nexport const AuthContext = React.createContext<AuthContextValue>({\r\n  user: null,\r\n  isAuthenticated: false,\r\n  login: () => {},\r\n  logout: () => {},\r\n});\r\n\r\ntype AuthProviderProps = {\r\n  children: React.ReactNode;\r\n};\r\n\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [user, setUser] = useState<number | null>(null);\r\n\r\n  const login = async (credentials: Credentials) => {\r\n    try {\r\n      console.log(\"aaaaaaaaaaaaaaaaaaaaaaa\");\r\n      console.log(JSON.stringify(credentials));\r\n      const response = await fetch(\"http://localhost:8080/api/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(credentials),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        console.log(response);\r\n        throw new Error(\"Login failed\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      setUser(data.id);\r\n      setIsAuthenticated(true);\r\n    } catch (error) {\r\n      console.error(error);\r\n      // handle login error\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    // clear user session and set isAuthenticated to false\r\n    console.log(\"logout\");\r\n    setIsAuthenticated(false);\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, isAuthenticated, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAepD,OAAO,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAa,CAAmB;EAC/DC,IAAI,EAAE,IAAI;EACVC,eAAe,EAAE,KAAK;EACtBC,KAAK,EAAE,MAAM,CAAC,CAAC;EACfC,MAAM,EAAE,MAAM,CAAC;AACjB,CAAC,CAAC;AAMF,OAAO,MAAMC,OAAO,GAAG,MAAM;EAAA;EAC3B,OAAOR,UAAU,CAACE,WAAW,CAAC;AAChC,CAAC;AAAC,GAFWM,OAAO;AAIpB,OAAO,MAAMC,YAAyC,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EACpE,MAAM,CAACL,eAAe,EAAEM,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACG,IAAI,EAAEQ,OAAO,CAAC,GAAGX,QAAQ,CAAgB,IAAI,CAAC;EAErD,MAAMK,KAAK,GAAG,MAAOO,WAAwB,IAAK;IAChD,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACtCD,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAACJ,WAAW,CAAC,CAAC;MACxC,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;QAC9DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEN,IAAI,CAACC,SAAS,CAACJ,WAAW;MAClC,CAAC,CAAC;MAEF,IAAI,CAACK,QAAQ,CAACK,EAAE,EAAE;QAChBT,OAAO,CAACC,GAAG,CAACG,QAAQ,CAAC;QACrB,MAAM,IAAIM,KAAK,CAAC,cAAc,CAAC;MACjC;MAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,EAAE;MAClCd,OAAO,CAACa,IAAI,CAACE,EAAE,CAAC;MAChBhB,kBAAkB,CAAC,IAAI,CAAC;IAC1B,CAAC,CAAC,OAAOiB,KAAK,EAAE;MACdd,OAAO,CAACc,KAAK,CAACA,KAAK,CAAC;MACpB;IACF;EACF,CAAC;;EAED,MAAMrB,MAAM,GAAG,MAAM;IACnB;IACAO,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACrBJ,kBAAkB,CAAC,KAAK,CAAC;IACzBC,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,oBACE,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAE;MAAER,IAAI;MAAEC,eAAe;MAAEC,KAAK;MAAEC;IAAO,CAAE;IAAA,UACnEG;EAAQ;IAAA;IAAA;IAAA;EAAA,QACY;AAE3B,CAAC;AAAC,IA1CWD,YAAyC;AAAA,KAAzCA,YAAyC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}