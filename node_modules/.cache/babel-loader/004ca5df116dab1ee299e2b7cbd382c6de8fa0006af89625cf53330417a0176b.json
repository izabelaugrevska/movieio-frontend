{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GAMING\\\\Downloads\\\\kino\\\\src\\\\movieProjections\\\\projectionsPage.tsx\",\n  _s = $RefreshSig$();\nimport { Box } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport ProjectionCard from \"./ProjectionCard\";\nimport SeatsTable from \"./SeatsTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Projections = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [projections, setProjections] = useState([]);\n  const [selectedProjection, setSelectedProjection] = useState();\n  const [projectionSeats, setProjectionSeats] = useState([]);\n  const [seats, setSeats] = useState([]);\n  const [movie, setMovie] = useState({\n    id: 99,\n    director: \"\",\n    movieName: \"\"\n  });\n  useEffect(() => {\n    const fetchProjections = async () => {\n      const response = await fetch(`http://localhost:8080/api/projections/getProjectionsByMovieId/${id}`);\n      const data = await response.json();\n      setProjections(data);\n    };\n    fetchProjections();\n  }, []);\n  useEffect(() => {\n    const fetchMovie = async () => {\n      const response = await fetch(`http://localhost:8080/api/movies/${id}`);\n      const data = await response.json();\n      setMovie(data);\n    };\n    fetchMovie();\n  }, []);\n  useEffect(() => {\n    const fetchSeats = async () => {\n      let seats = [];\n      projections.forEach(async projection => {\n        const response = await fetch(`http://localhost:8080/api/seats/getSeatsByMovieTheaterId/${projection.movieTheater.id}`);\n        const data = await response.json();\n        const seatsData = {\n          seats: data,\n          projectionId: projection.id\n        };\n        seats.push(seatsData);\n      });\n      setProjectionSeats(seats);\n    };\n    fetchSeats();\n  }, [projections, selectedProjection]);\n  useEffect(() => {\n    if (selectedProjection) {\n      const seats = projectionSeats.filter(proj => proj.projectionId === selectedProjection.id);\n      setSeats(seats[0].seats);\n    }\n  }, [projections, selectedProjection]);\n  useEffect(() => {\n    console.log(seats);\n  }, [seats]);\n  const handleClick = projection => {\n    setSelectedProjection(projection);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        gap: \"50px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          padding: \"100px\"\n        },\n        children: projections.map(projection => /*#__PURE__*/_jsxDEV(ProjectionCard, {\n          projection: projection,\n          handleClick: handleClick,\n          selected: selectedProjection === projection\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          flexGrow: 1\n        },\n        children: selectedProjection && selectedProjection.id && /*#__PURE__*/_jsxDEV(SeatsTable, {\n          seats: seats,\n          projection: selectedProjection,\n          movie: movie\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(Projections, \"HOW65scvLg6WqUAqLJ3nlhTwWVM=\", false, function () {\n  return [useParams];\n});\n_c = Projections;\nexport default Projections;\nvar _c;\n$RefreshReg$(_c, \"Projections\");","map":{"version":3,"names":["Box","useEffect","useState","useParams","ProjectionCard","SeatsTable","Projections","id","projections","setProjections","selectedProjection","setSelectedProjection","projectionSeats","setProjectionSeats","seats","setSeats","movie","setMovie","director","movieName","fetchProjections","response","fetch","data","json","fetchMovie","fetchSeats","forEach","projection","movieTheater","seatsData","projectionId","push","filter","proj","console","log","handleClick","display","justifyContent","alignItems","gap","flexDirection","padding","map","flexGrow"],"sources":["C:/Users/GAMING/Downloads/kino/src/movieProjections/projectionsPage.tsx"],"sourcesContent":["import { Box } from \"@mui/material\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { MovieData } from \"../types/movieData\";\r\nimport { movieProjectionData } from \"../types/movieProjectionData\";\r\nimport { seatData } from \"../types/seatData\";\r\nimport ProjectionCard from \"./ProjectionCard\";\r\nimport SeatsTable from \"./SeatsTable\";\r\n\r\nconst Projections = () => {\r\n  const { id } = useParams();\r\n  const [projections, setProjections] = useState<movieProjectionData[]>([]);\r\n  const [selectedProjection, setSelectedProjection] = useState<\r\n    movieProjectionData | undefined\r\n  >();\r\n  const [projectionSeats, setProjectionSeats] = useState<\r\n    { projectionId: number; seats: seatData[] }[]\r\n  >([]);\r\n  const [seats, setSeats] = useState<seatData[]>([]);\r\n  const [movie, setMovie] = useState<MovieData>({\r\n    id: 99,\r\n    director: \"\",\r\n    movieName: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchProjections = async () => {\r\n      const response = await fetch(\r\n        `http://localhost:8080/api/projections/getProjectionsByMovieId/${id}`\r\n      );\r\n      const data = await response.json();\r\n      setProjections(data);\r\n    };\r\n\r\n    fetchProjections();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchMovie = async () => {\r\n      const response = await fetch(`http://localhost:8080/api/movies/${id}`);\r\n      const data = await response.json();\r\n      setMovie(data);\r\n    };\r\n\r\n    fetchMovie();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchSeats = async () => {\r\n      let seats: any[] = [];\r\n      projections.forEach(async (projection) => {\r\n        const response = await fetch(\r\n          `http://localhost:8080/api/seats/getSeatsByMovieTheaterId/${projection.movieTheater.id}`\r\n        );\r\n        const data = await response.json();\r\n        const seatsData = {\r\n          seats: data,\r\n          projectionId: projection.id,\r\n        };\r\n        seats.push(seatsData);\r\n      });\r\n      setProjectionSeats(seats);\r\n    };\r\n    fetchSeats();\r\n  }, [projections, selectedProjection]);\r\n\r\n  useEffect(() => {\r\n    if (selectedProjection) {\r\n      const seats = projectionSeats.filter(\r\n        (proj) => proj.projectionId === selectedProjection.id\r\n      );\r\n      setSeats(seats[0].seats);\r\n    }\r\n  }, [projections, selectedProjection]);\r\n\r\n  useEffect(() => {\r\n    console.log(seats);\r\n  }, [seats]);\r\n\r\n  const handleClick = (projection: movieProjectionData) => {\r\n    setSelectedProjection(projection);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          gap: \"50px\",\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            padding: \"100px\",\r\n          }}\r\n        >\r\n          {projections.map((projection) => (\r\n            <ProjectionCard\r\n              projection={projection}\r\n              handleClick={handleClick}\r\n              selected={selectedProjection === projection}\r\n            />\r\n          ))}\r\n        </Box>\r\n        <Box sx={{ flexGrow: 1 }}>\r\n          {selectedProjection && selectedProjection.id && (\r\n            <SeatsTable\r\n              seats={seats}\r\n              projection={selectedProjection}\r\n              movie={movie}\r\n            />\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Projections;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}